<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- 配置整合Mybatis过程 -->

    <!-- 统一加载配置文件 -->
    <context:property-placeholder location="classpath:properties/*.properties"/>


    <!-- 1.数据库连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">

        <!-- 配置连接池属性 -->


        <property name="driverClass" value="${jdbc_driver}"/>
        <property name="jdbcUrl" value="${jdbc_url}"/>
        <property name="user" value="${jdbc_user}"/>
        <property name="password" value="${jdbc_password}"/>


        <!-- c3p0连接池私有属性 -->

        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
        <!-- 关闭连接后不自动commit -->
        <property name="autoCommitOnClose" value="false"/>
        <!-- 获取连接超时时间 -->
        <property name="checkoutTimeout" value="1000"/>
        <!-- 当连接失败重试次数 -->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>

    <!-- 约定大于配置 -->
    <!-- 2.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">

        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>

        <!-- 配置Mybatis全局配置文件：mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>

        <!-- 扫描entity包 使用别名 (value间使用分号分隔)-->
        <property name="typeAliasesPackage" value="com.kevin.mirs.entity"/>

        <!-- 扫描SQL配置文件：mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>

    </bean>

    <!-- 配置推荐系统使用到的MySQLJDBCDataModel -->
    <bean id="recommendDataModel" class="org.apache.mahout.cf.taste.impl.model.jdbc.MySQLJDBCDataModel">
        <constructor-arg name="dataSource" ref="dataSource"/>
        <constructor-arg name="preferenceTable" value="${preferenceTable}"/>
        <constructor-arg name="userIDColumn" value="${userIDColumn}"/>
        <constructor-arg name="itemIDColumn" value="${itemIDColumn}"/>
        <constructor-arg name="preferenceColumn" value="${preferenceColumn}"/>
        <constructor-arg name="timestampColumn" value=""/>
    </bean>

    <!-- 配置扫描DAO接口包，动态实现DAO接口，注入到Spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">

        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>

        <!-- 给出扫描DAO接口包 -->
        <property name="basePackage" value="com.kevin.mirs.dao"/>

    </bean>

    <!-- DAO -->
    <context:component-scan base-package="com.kevin.mirs.dao"/>


    <!--#######################  web  ##########################-->

    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <prop key="kaptcha.border">yes</prop>
                        <prop key="kaptcha.border.color">105,179,90</prop>
                        <prop key="kaptcha.textproducer.font.color">blue</prop>
                        <prop key="kaptcha.image.width">125</prop>
                        <prop key="kaptcha.image.height">55</prop>
                        <prop key="kaptcha.textproducer.font.size">45</prop>
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                        <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <!-- 扫描web相关的bean -->
    <context:component-scan base-package="com.kevin.mirs.web"/>

    <!-- 扫描OAuth 相关配置 -->
    <context:component-scan base-package="com.kevin.oauth.config"/>


    <bean class="com.kevin.config.LuceneConfig"/>
    <bean class="com.kevin.config.WebSocketConfig"/>

    <!--#######################  service  ##########################-->

    <!-- 扫描service 包下所有注解的类型 -->
    <context:component-scan base-package="com.kevin.*.service"/>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">

        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>

    </bean>

    <!--配置基于注解的声明式事务-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 定时任务 -->
    <context:component-scan base-package="com.kevin.mirs.jobs"></context:component-scan>

    <!-- 发送邮件 -->

    <!-- JavaMail相关配置 -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl" >
        <property name="host" value="${mailHost}"></property>
        <property name="username" value="${maillUsername}"></property>
        <property name="password" value="${mailPassword}"></property>
        <property name="protocol" value="smtp"></property>
        <property name="defaultEncoding" value="utf-8"></property>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.from">${mailFrom}</prop>
                <prop key="mail.smtp.timeout">${mail.smtp.timeout}</prop>
                <prop key="mail.smtp.socketFactory.port">465</prop>
                <prop key="mail.smtp.socketFactory.fallback">false</prop>
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                <!--<prop key="mail.debug">true</prop>-->
            </props>
        </property>
    </bean>

</beans>